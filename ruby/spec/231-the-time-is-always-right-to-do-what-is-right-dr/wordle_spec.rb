# frozen_string_literal: true

require_relative '../../challenges/231-the-time-is-always-right-to-do-what-is-right-dr/index'

# Talk is cheap, show me the code
RSpec.describe Wordle do
  context 'when we want to test errors' do
    it 'must raise StandardError when solution is invalid' do
      expect { described_class.new 'fake' }.to raise_error(StandardError)
    end

    it 'must raise StandardError when guess is invalid' do
      wordle = described_class.new 'angel'
      expect { wordle.guess('fake') }.to raise_error(StandardError)
    end
  end

  context "when we test with 'fudge' word" do
    let(:wordle) { described_class.new 'fudge' }

    it "word 'reads' must be 'â¬›ğŸŸ¨â¬›ğŸŸ¨â¬›'" do
      expect(wordle.guess('reads')).to eq 'â¬›ğŸŸ¨â¬›ğŸŸ¨â¬›'
    end

    it "word 'deeds' must be 'ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›'" do
      expect(wordle.guess('deeds')).to eq 'ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›'
    end

    it "word 'lodge' must be 'â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©'" do
      expect(wordle.guess('lodge')).to eq 'â¬›â¬›ğŸŸ©ğŸŸ©ğŸŸ©'
    end

    it "word 'fudge' must be 'ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©'" do
      expect(wordle.guess('fudge')).to eq 'ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©'
    end
  end

  context "when we play with 'perps' word" do
    let(:wordle) { described_class.new 'perps' }

    it "word 'poppy' must be 'ğŸŸ©â¬›â¬›ğŸŸ©â¬›'" do
      expect(wordle.guess('poppy')).to eq 'ğŸŸ©â¬›â¬›ğŸŸ©â¬›'
    end

    it "word 'eaeee' must be 'ğŸŸ¨â¬›â¬›â¬›â¬›'" do
      expect(wordle.guess('eaeee')).to eq 'ğŸŸ¨â¬›â¬›â¬›â¬›'
    end

    it "word 'erpsp' must be 'ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨'" do
      expect(wordle.guess('erpsp')).to eq 'ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨'
    end
  end
end
